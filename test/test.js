const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("PrimeDetector", function () {
    let PrimeDetector, primeDetector, owner, addr1, addr2;

    beforeEach(async () => {
        PrimeDetector = await ethers.getContractFactory('PrimeDetector');
        primeDetector = await PrimeDetector.deploy();
        [owner, addr1, addr2, _] = await ethers.getSigners();
    });

    describe('Deployment', () => {
        it('Should set the right owner', async () => {
            expect(await primeDetector.owner()).to.equal(owner.address);
        });
    });

    describe('Generation', () => {
        it ('Stake is not high enough', async () => {
            await expect(
                primeDetector.generatePrimeNumberCandidate(113,
                    {value: ethers.utils.parseEther("0.99")}
                )
            ).to.be.revertedWith('Stake provided is not high enough');
        });

        it ('Prime generated by a non-owner', async () => {
             await expect(
                primeDetector.connect(addr1).generatePrimeNumberCandidate(113, {
                    value: ethers.utils.parseEther("51"),
                })).to.be.revertedWith('Ownable: caller is not the owner');
        });

        it ('Successful generation and no challengers', async () => {
            await primeDetector.generatePrimeNumberCandidate(113,
                {value: ethers.utils.parseEther("51")});

            await primeDetector.generatePrimeNumberCandidate(200,
                {value: ethers.utils.parseEther("51")});

            expect(await primeDetector.getNumberOfCommitments()).to.equal(2);
        });
    });

    describe('Committing', () => {
        it ('Successful generation and no challengers', async () => {
            await primeDetector.generatePrimeNumberCandidate(113,
                {value: ethers.utils.parseEther("51")});

            await primeDetector.generatePrimeNumberCandidate(200,
                {value: ethers.utils.parseEther("51")});

            expect(await primeDetector.getNumberOfCommitments()).to.equal(2);

            await expect(primeDetector.commit(0)).to.be.revertedWith('Committing too soon');
            await expect(primeDetector.commit(0)).to.be.revertedWith('Committing too soon');

            await network.provider.send("evm_increaseTime", [3601]);

            await primeDetector.commit(0);
            await primeDetector.commit(1);
        });
    });

    describe('Challenging', () => {
        it ('Single successful challenge', async () => {
            await primeDetector.generatePrimeNumberCandidate(200,
                {value: ethers.utils.parseEther("51")});

            expect(await primeDetector.getNumberOfCommitments()).to.equal(1);

            // addr1 trie to challenge id 0 with incorrect factors
            expect(
                await primeDetector.connect(addr1).getMaybePrimeAt(0)
            ).to.equal(200);

            await primeDetector.connect(addr2).challenge(20, 10, 0)

            // Owner tries to commit id 1 but fail - it was challenged!
            await network.provider.send("evm_increaseTime", [3601]);
            await expect(
                primeDetector.commit(0)
            ).to.be.revertedWith('No valid data to commit');
        });

        it ('Failed challenges', async () => {
            await primeDetector.generatePrimeNumberCandidate(113,
                {value: ethers.utils.parseEther("51")});

            expect(await primeDetector.getNumberOfCommitments()).to.equal(1);

            // addr1 trie to challenge id 0 with incorrect factors
            expect(
                await primeDetector.connect(addr1).getMaybePrimeAt(0)
            ).to.equal(113);

            await expect(
                primeDetector.connect(addr1).challenge(30, 4, 0)
            ).to.be.revertedWith('Incorrect factors');

            await network.provider.send("evm_increaseTime", [3601]);

            // addr2 Challenging id 0 too late
            await expect(
                primeDetector.connect(addr2).challenge(25, 5, 0)
            ).to.be.revertedWith('Challenging too late');

            // Finally commit id 0
            await primeDetector.commit(0);
        });

        it ('Two primes in the queue', async () => {
            await primeDetector.generatePrimeNumberCandidate(113,
                {value: ethers.utils.parseEther("51")});

            await primeDetector.generatePrimeNumberCandidate(200,
                {value: ethers.utils.parseEther("51")});

            expect(await primeDetector.getNumberOfCommitments()).to.equal(2);

            // addr1 trie to challenge id 0 with incorrect factors
            expect(
                await primeDetector.connect(addr1).getMaybePrimeAt(0)
            ).to.equal(113);

            await expect(
                primeDetector.connect(addr1).challenge(30, 4, 0)
            ).to.be.revertedWith('Incorrect factors');

            // owner tries to commit too soon
            await network.provider.send("evm_increaseTime", [3000]);
            await expect(primeDetector.commit(0)).to.be.revertedWith('Committing too soon');

            // addr2 tries to challenge id 1
            expect(
                await primeDetector.connect(addr1).getMaybePrimeAt(0)
            ).to.equal(113);
            await primeDetector.connect(addr2).challenge(20, 10, 1)

            // Owner tries to commit id 1 but fail - it was challenged!
            await network.provider.send("evm_increaseTime", [1000]);
            await expect(
                primeDetector.commit(1)
            ).to.be.revertedWith('No valid data to commit');

            // addr2 Challenging id 0 too late
            await expect(
                primeDetector.connect(addr2).challenge(25, 5, 0)
            ).to.be.revertedWith('Challenging too late');

            // Finally commit id 0
            await primeDetector.commit(0);
        });
    });
});
